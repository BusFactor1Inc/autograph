;; -*- mode: lisp -*-

;; Some of these style rules make little sense. It's more of a testbed
;; for autograph features.

(defvar width '2em)
(defparameter height '100em)
(defconstant something '100%) 

;; Functions are written in Common Lisp and act like macros such that
;; they must return a symbol or a form that is included in the source
;; where they are called.
(defun random-color ()
  (let ((r (random 1.0)))
    (cond
     ((< r .25) 'red)
     ((< r .5) 'green)
     ((< r .75) 'blue)
     (t 'black))))

(defun edit (x)
  `(input
    (font-family monospace)
    (font-weight ,x)
    (padding 0px)
    (margin 0px)
    (cursor pointer)))

(*
 (font-family monospace)
 (font-weight bold)
 (padding 0px)
 (margin 0px)
 (cursor pointer))

(edit bold)

(input[type=text]
 (border 0px solid)
 (font-size inherit)
 (padding 0px)
 (margin 0px))

((cls *Two-character-hex-value-edit-view) ;; cls is for classes
 (max-width width)
 (display inline-block))

((cls *Edit-view) ;; -> .EditView
 (width 2em)
 (border solid 1px (random-color)))

((cls *Edit-view hover) ;; -> .EditView:hover
 (border solid 1px red))

((id *Some-id) ;; id is for id's
 (background-color red))

((inside div input)  ;; ^ === insert spaces between
 (display inline-block))
 
((child (cls *Some-cls) (id *Some-id))
 (display inline-block))

((after (cls *Some-cls) (id *Some-id))
 (display inline-block))

((before (cls *Some-cls) (id *Some-id))
 (display inline-block))

((all (cls *Some-cls)) ;; & === insert commas between
 (display inline-block))

((cls *Tiny-Button before)
 (content "+"))

((cls *Some-div hover)
 (box-shadow inset 0 0 5px "#000000"))

((cls *Window)
 (border solid 1px red))

(@viewport
 (width 65%))

;; Strings are passed 'as-is' for things that don't have syntax yet
("@media (max-width: 699px) and (min-width: 520px)"
 (@viewport
  (width 640px)))
